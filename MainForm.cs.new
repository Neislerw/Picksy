#nullable enable
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;
using System.IO;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Text.Json;
using System.Diagnostics;
using System.Web;
using System.Drawing.Imaging;
using System.Drawing.Text;
using System.Runtime.InteropServices;
using System.Management;
using System.Threading.Tasks;
using Windows.Storage;
using Windows.Devices.Enumeration;
using Windows.Storage.FileProperties;

namespace Picksy
{
    public partial class MainForm : Form
    {
        // ... existing fields ...

        private bool isMtpDevice = false;
        private string? mtpDeviceId;
        private string? mtpDeviceName;
        private StorageFolder? mtpDeviceFolder;

        // ... existing methods ...

        private async Task SaveStateToFile(bool showConfirmation = true)
        {
            try
            {
                var state = new
                {
                    CurrentIndex = currentIndex,
                    ProcessedFiles = processedFiles,
                    CurrentFolderPath = currentFolderPath,
                    IsMtpDevice = isMtpDevice,
                    MtpDeviceId = mtpDeviceId,
                    MtpDeviceName = mtpDeviceName
                };

                string json = JsonSerializer.Serialize(state);
                string statePath = Path.Combine(currentFolderPath, "picksy_state.json");

                if (isMtpDevice && mtpDeviceFolder != null)
                {
                    // Save state to device
                    var stateFile = await mtpDeviceFolder.CreateFileAsync("picksy_state.json", CreationCollisionOption.ReplaceExisting);
                    await FileIO.WriteTextAsync(stateFile, json);
                }
                else
                {
                    // Save state to local file
                    File.WriteAllText(statePath, json);
                }

                if (showConfirmation)
                {
                    MessageBox.Show("State saved successfully.", "Picksy");
                }
            }
            catch (Exception ex)
            {
                if (showConfirmation)
                {
                    MessageBox.Show($"Error saving state: {ex.Message}", "Picksy Error");
                }
            }
        }

        private void SaveAndQuitButton_Click(object sender, EventArgs e)
        {
            SaveStateToFile(true).GetAwaiter().GetResult();
            Application.Exit();
        }

        private void DeleteCurrentBatch()
        {
            if (currentBatch == null || currentBatch.Count == 0) return;

            try
            {
                if (isMtpDevice && mtpDeviceFolder != null)
                {
                    // Create _delete folder on device if it doesn't exist
                    var deleteFolder = mtpDeviceFolder.CreateFolderAsync("_delete", CreationCollisionOption.OpenIfExists).GetAwaiter().GetResult();

                    // Move files to _delete folder
                    foreach (var file in currentBatch)
                    {
                        var deviceFile = mtpDeviceFolder.GetFileAsync(Path.GetFileName(file)).GetAwaiter().GetResult();
                        deviceFile.MoveAsync(deleteFolder).GetAwaiter().GetResult();
                    }
                }
                else
                {
                    // Create _delete folder if it doesn't exist
                    string deleteFolder = Path.Combine(currentFolderPath, "_delete");
                    Directory.CreateDirectory(deleteFolder);

                    // Move files to _delete folder
                    foreach (var file in currentBatch)
                    {
                        string fileName = Path.GetFileName(file);
                        string targetPath = Path.Combine(deleteFolder, fileName);
                        File.Move(file, targetPath);
                    }
                }

                currentBatch.Clear();
                UpdateBatchLabel();
                LoadNextBatch();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error deleting batch: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async Task<List<(string Id, string Name)>> GetMtpDevices()
        {
            var devices = new List<(string Id, string Name)>();
            try
            {
                // Get all removable storage devices
                var deviceSelector = DeviceClass.PortableStorageDevice;
                var deviceInfoCollection = await DeviceInformation.FindAllAsync(deviceSelector);

                foreach (var deviceInfo in deviceInfoCollection)
                {
                    // Only include devices that look like phones
                    if (deviceInfo.Name.Contains("Phone", StringComparison.OrdinalIgnoreCase) ||
                        deviceInfo.Name.Contains("Device", StringComparison.OrdinalIgnoreCase) ||
                        deviceInfo.Name.Contains("Android", StringComparison.OrdinalIgnoreCase))
                    {
                        devices.Add((deviceInfo.Id, deviceInfo.Name));
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error detecting devices: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return devices;
        }

        private void SelectLocalFolder()
        {
            using (var folderBrowserDialog = new FolderBrowserDialog())
            {
                folderBrowserDialog.Description = "Select a folder to process photos";
                folderBrowserDialog.ShowNewFolderButton = false;
                folderBrowserDialog.RootFolder = Environment.SpecialFolder.MyComputer;

                if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
                {
                    currentFolderPath = folderBrowserDialog.SelectedPath;
                    LoadSession(currentFolderPath);
                }
            }
        }

        private void LoadSession(string stateFilePath, (int BatchSizeMinimum, int BatchTimingMaximum, bool IncludeSubfolders, string BatchSelectionMethod)? savedSettings = null)
        {
            try
            {
                // ... existing LoadSession code ...
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading session: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async Task<bool> SelectMtpDevice()
        {
            var devices = await GetMtpDevices();
            if (devices.Count == 0)
            {
                MessageBox.Show("No portable devices found. Please connect your phone via USB and make sure it's set to file transfer mode.", "No Devices", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return false;
            }

            using var deviceForm = new Form
            {
                Text = "Select Device",
                Size = new Size(400, 300),
                StartPosition = FormStartPosition.CenterParent,
                FormBorderStyle = FormBorderStyle.FixedDialog,
                MaximizeBox = false,
                MinimizeBox = false
            };

            var deviceList = new ListBox
            {
                Dock = DockStyle.Fill,
                Font = new Font("Segoe UI", 12F)
            };

            foreach (var device in devices)
            {
                deviceList.Items.Add(device.Name);
            }

            var selectButton = new Button
            {
                Text = "Select",
                Dock = DockStyle.Bottom,
                Height = 40,
                Font = new Font("Segoe UI", 12F)
            };

            deviceForm.Controls.Add(deviceList);
            deviceForm.Controls.Add(selectButton);

            bool deviceSelected = false;
            selectButton.Click += async (s, e) =>
            {
                if (deviceList.SelectedIndex >= 0)
                {
                    var selectedDevice = devices[deviceList.SelectedIndex];
                    mtpDeviceId = selectedDevice.Id;
                    mtpDeviceName = selectedDevice.Name;
                    deviceSelected = true;
                    deviceForm.Close();
                }
            };

            deviceForm.ShowDialog();

            if (deviceSelected)
            {
                try
                {
                    // Get the device folder
                    var device = await DeviceInformation.CreateFromIdAsync(mtpDeviceId!);
                    mtpDeviceFolder = await StorageFolder.GetFolderFromPathAsync(device.Properties["System.Devices.InterfaceClassGuid"].ToString()!);
                    return true;
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error accessing device: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
            }

            return false;
        }

        private async Task ProcessMtpDevice()
        {
            if (mtpDeviceFolder == null) return;

            try
            {
                // Create temp directory for downloaded photos
                string tempDir = Path.Combine(Path.GetTempPath(), "Picksy", mtpDeviceId!);
                Directory.CreateDirectory(tempDir);

                // Find and download photos
                var cameraFolder = await FindCameraFolder(mtpDeviceFolder);
                if (cameraFolder != null)
                {
                    await DownloadFolderContents(cameraFolder, tempDir);
                    currentFolderPath = tempDir;
                    isMtpDevice = true;
                    await LoadImages();
                }
                else
                {
                    MessageBox.Show("Could not find Camera folder on device.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error processing device: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async Task<StorageFolder?> FindCameraFolder(StorageFolder rootFolder)
        {
            try
            {
                // Common camera folder paths
                string[] possiblePaths = new[]
                {
                    "DCIM\\Camera",
                    "DCIM",
                    "Pictures\\Camera",
                    "Pictures"
                };

                foreach (var path in possiblePaths)
                {
                    try
                    {
                        var folder = await rootFolder.GetFolderAsync(path);
                        if (folder != null)
                        {
                            return folder;
                        }
                    }
                    catch { }
                }

                // If no common paths found, search for folders containing "camera"
                var folders = await rootFolder.GetFoldersAsync();
                foreach (var folder in folders)
                {
                    if (folder.Name.Contains("camera", StringComparison.OrdinalIgnoreCase))
                    {
                        return folder;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error finding camera folder: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            return null;
        }

        private async Task DownloadFolderContents(StorageFolder folder, string targetDir)
        {
            try
            {
                var files = await folder.GetFilesAsync();
                foreach (var file in files)
                {
                    if (IsImageFile(file.Name))
                    {
                        var properties = await file.Properties.GetImagePropertiesAsync();
                        if (properties != null)
                        {
                            var targetPath = Path.Combine(targetDir, file.Name);
                            await file.CopyAsync(await StorageFolder.GetFolderFromPathAsync(targetDir), file.Name);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error downloading files: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        // ... rest of the existing code ...
    }
} 